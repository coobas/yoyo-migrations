Database migrations using SQL and the DB-API.

Usage::

	yoyo-migrate apply postgres://user:password@localhost/database ./migrations
	yoyo-migrate rollback mysql://user:password@localhost/database ./migrations

The migrations directory should contain a series of migration scripts. Each
migration script is a python file (``.py``) containing a series of steps. Each
step contains a migration query and optionally a rollback query. For example::

	#
	# file: 0001.create-foo.py
	#
	step(
		"CREATE TABLE foo (id INT, bar VARCHAR(20), PRIMARY KEY (id))",
		"DROP TABLE foo",
	)

The filename of each file (without the .py extension) is used as the identifier
for each migration.

Steps may also take an optional argument ``ignore_errors``, which must be one
of ``apply``, ``rollback``, or ``all``. If in the previous example the table
foo might have already been created by another means, we could add
``ignore_errors='apply'`` to the step to allow the system to continue
regardless.

Steps can also be python callable objects that take a database connection as
their single argument. For example::

	#
	# file: 0002.update_keys.py
	#
	def do_step(conn):
		cursor = conn.cursor()
		cursor.execute(
			"INSERT INTO sysinfo "
			" (osname, hostname, release, version, arch)"
			" VALUES (%s, %s, %s, %s, %s %s)",
			os.uname()
		) 
	step(do_step)

